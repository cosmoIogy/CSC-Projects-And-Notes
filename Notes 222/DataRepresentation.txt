Representing Data 

Binary Representations:
- Base 2 Number Representations:
    - Represent 15213 (base 10) -> 11101101101101 (base 2)
    - Represent 1.5213 (base 10) -> 1.1101101101101 * 2^13

Encoding Byte Values:
- Byte : 8 bits
    - Binary :             00000000 - 11111111
    - Hexadecimal :         0 - FF
        -Base 16 number Representation
        - Uses the character 0 to 9 and A to F
        - Write FA1D37B (base 16) in C as 0xFA1D37B or 0xfa1d37b
    - Decimal :             0 - 255

Machine Words
-Machine has "Words Size"
-Most current machines are 64-bit (8 byte)
    -Potentially address 1.8 * 10^19 bytes
-Older machines are 32-bit (4 byte)
    -Limit addresses to 4gb
    -Too small for memory-intensive applications 
-Machines support multiple data formats
    -Fractions or multiple word size
    -Always integral number of bytes

Word Oriented Memory Organization:
- Addresses Specify Byte Locations
    -Address of first byte in word
    -Addresses of successive words differ by 4 (32-bit) or 8 (64-bit)

Byte Ordering
- 2 conventions:
    -Big Endian : Least significant byte has the highest address
    -Little Endian: Least significant byte has the lowest address

Example:
    -Variable X : 0x1234567
    -Address given as &X : 0x100

                  | 0x98 | 0x99 | 0x100 | 0x101 | 0x102 | 0x103 | 0x104
Big Endian:       |      |      |  01   |   23  |  45   |   67  |   
Little Endian:    |      |      |  67   |   45  |  23   |   01  |


Data Representations: Sizes of C data types (in bytes)

Data Types      64-bit      32-bit 

int             4           4
long            8           4
character       1           1
short           2           2
float           4           4
double          8           8 (will split up value)
char *          8           4

Boolean Algebra
-Developed by George Boole in 19th Century
    -Encode True 1 and False is 0
    -AND : A&B = 1 when both A = 1 and B = 1
    - OR : A|B = 1 when either A = 1 or B = 1
    - NOT : ~A = 1 when A = 0
    - Exclusive-Or (XOR) : A^B = 1 when either A = 1 or B = 1 but not both

Properties of & and ^/|
    -Commutative sum : A^B = B^A 
    -Commutative product : A&B = B&A 
    -Assocative sum: (A^B)^C = A^(B^C)
    -Associative product: (A&B)&C = A&(B&C)
    -Product over sum (Distrubution): A&(B^C) = (A^B)&(A^C)
    - 0 is sum identity = A^0 = A 
    - 1 is product identity: A&1 = A 
    - 0 is product annihilator : A&0 = 0
    - Additive inverse : A^A = 0

    Bit Level Operations in C:
    -Operations &, |, ~, ^ available C 
        -long, int, short, char
    -View arguments as bit-vectors
    -Arguments applied bitwise (one bit at a time)
    -Examples:
        - ~0x49     -> 0xB6
          ~01001001 -> 10110110
          ~0x41     -> 0xBE
          ~01000001 -> 10111110
          ~0x00     -> 0xFF
          ~00000000 -> 11111111

          -0x69 & 0x55
          01101001
         &01010101
          01000001 -> 0x41

          -0x69 | 0x55
          01101001
        | 01010101
          01111101 -> 0x7D 

Logic Operations
-Operators:
    -&&, ||, !
    -View 0 as False
    -Anything else as True 
    -Always return 0 or 1

Examples:
    - !0x41 -> 0x00
    - !0x00 -> 0x01
    - !!0x41 -> 0x01

    -0x69 && 0x55 -> 0x01
    -0x69 || 0x55 -> 0x01

Shift Operations:
-Left Shift:        x << y
    - shift bit-vector x left y positions
        -throw away extra bits on the left
        -Fill in with 0's on the right

-Right Shift:       x >> y
    -shift bit-vector x right y positions
        -throw away extra bits on the right
        -Logical Shift:
            - Fill in with 0's on the left
        -Arithmetic shift:
            -Replicate most significant bit on the right
            -Useful for two's complement integer representation 


-Examples:
    - x = 0b01100010
    x << 3 = 0b00010(000)
    log >> 2 = 0b(00)011000
    arith >> 2 = 0b(00)011000

    - x = 0b10100010
    x << 4 = 0b0010(0000)
    log >> 3 = 0b(000)10100
    arith >> 6 = 0b(111111)10

    Review

    BITWISE OPERATIONS 

    1. 0x5B | 0x45

        01011011
       |01000101
        01011111
        = 0x5F

    2. ~0x5b & 0x45

        ~01011011
        =10100100
        &01000101
         00000100
        = 0x04

Unsigned/Signed Integers:

- X = x(w-1)x(w-2)...x(1)x(0)

Unsigned : B2U(X) = (sum from i = 0 to w-1)X(i)*2^i

Two's complement: B2T(x) = -x(w-1)*2^w-1*2^w-1 + (sum from i = 0 to w-1)X(i)*2^i
    - 1 for negative in most significant bit
    - 0 for nonnegative


char x = 123 : 01111011
char y = -123 : 10000101

weight          123             -123
    1           1                 1
    2           1                 0  
    4           0                 1
    8           1                 0
    16          1                 0
    32          1                 0
    64          1                 0
  -128          0                 1

Numeric Range
-Unsigned Values
    -UMin = 0
    -Umax = (2^w)-1
-Two's complement
    -Tmin = -2^w-1
    -Tmax = 2^w-1 - 1

Values for w = 16

            Decimal             Hexadecimal             Binary 
Umax        65535               FF FF                   11111111 11111111
Tmax        32767               7F FF                   01111111 11111111        
Tmin        -32768              80 00                   10000000 00000000 
-1          -1                  FF FF                   11111111 11111111 
0           0                   00 00                   00000000 00000000


Word Sizes

            8           16              32              64
Umax        255         65535           4294967295      ~18 Quintillion
Tmax        127         32767           2147483647      ~9 Quintillioin
Tmin        -128        -32768         -2147483648      ~-9 Quintillioin

Observations
|Tmin| = Tmax + 1
Umax = (Umax * 2) + 1

C Progamming:
- #include <limits.h>
- Declares the constants:
    - UCHAR_MAX (=255)
    - CHAR_MAX (=127)
    - CHAR_MIN (=-128)
    - INT_MIN
    - INT_MAX
    - UINT_MAX


Casting Signed to Unsigned in C

char x = 123;
char y = -123;

unsigned char ux = (unsigned char)x;
unsigned char uy = (unsigned char)y;

-C allows conversions between signed and unsigned 
-Resulting Values
    -No change in bit representation
    -Nonnegative values are unchanged
        - ux = 123
    - Negative values change into positive values
        - uy = 133
    
Constants
    -By default, constants are signed integers 

Casting 
    -Explicit Casting
        int tx, ty
        unsigned ux, uy 
    
        tx = (unsigned) ty 
        uy = (unsigned) ty 
        tx = (int) uy 

    -Implicit Casting also occus via assignments and procedure calls 
        tx = ux 
        uy = ty

Sign Extension
- Given a w-bit signed integer x, to convert it to a w+k bit integer of the same value: 
- Make k copies of the signed bit 

- X = 1001 (-7) w = 4, k = 4
- X' = 1111 1001 (-7) 

2's Complement and overflow
- Assume TAdd(u,v) adds u and v together 
- Determine if s = TAdd(u,  v) overflows

Overflow if and only if either:
    - u < 0, v < 0, s >= 0 - Negative Overflow 
    - u >= 0, v >= 0, s < 0 - Positive Overflow 

Power of 2 multiplication with shift
-Operation 
    - u << k = u * 2^k 
    - both signed and unsigned 
- Left shift x << y:
    - Shift bit-vector x left y positions 
    - Fill with 0's on right 

Power of 2 division with shift
- Quotient of Unsigned by power of 2
    - u >> k gives u / 2^k 
    - uses logical shift 
- Quotient of signed by power of 2
    - u >> k gives u / 2^k 
    - uses arithmetic shift (will fill with whatever the sign was)
- Right shift : x >> y
    - shift bit-vector x by y positions 
    - get rid of extra values on the right 
    - Logical Shift : Fill with 0's on Left 
    - Arithmetic Shift : Fill missing values with sign bit 